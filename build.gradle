import org.asciidoctor.gradle.jvm.AsciidoctorTask

/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



buildscript {

    def sonarqubeVersion = "3.0"
    def asciidoctorGradleVersion = "3.3.0"
    def artifactoryVersion="4.18.0"
    def bintrayVersion = "1.8.5"
    def owaspDependencyCheckVersion = "6.0.3"
    def httpBuilderVersion = "0.7.2"

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorGradleVersion")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:$artifactoryVersion")
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayVersion")
        classpath("org.owasp:dependency-check-gradle:$owaspDependencyCheckVersion")
        classpath("org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion")
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

apply plugin: 'java'
apply plugin: 'org.sonarqube'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.owasp.dependencycheck'


allprojects {
    group 'com.webauthn4j'
    version "$webAuthn4JVersion"

    dependencyCheck {
        failBuildOnCVSS = project.hasProperty("failBuildOnCVSS") ? project.property("failBuildOnCVSS").toInteger() : 11
        // Never fail with this value. CI build argument updates this property for blocking vulnerable release.
        suppressionFile = "$rootDir/owasp/suppression.xml"
    }

}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.artifactory"

    sourceCompatibility = 1.8

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed" //, "standardOut", "standardError"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            showStandardStreams = false
        }
    }

    repositories {
        mavenCentral()
    }

    def springBootVersion = "2.4.0"
    def kerbyVersion = "2.0.1"
    def bouncyCastleVersion = "1.67"
    def checkerframeworkVersion = "3.7.1"
    def mockitoVersion = "3.6.0"

    dependencies {
        constraints {
            // Independent libraries
            implementation("org.checkerframework:checker-qual:$checkerframeworkVersion")
            implementation("org.apache.kerby:kerby-asn1:$kerbyVersion")
            implementation("org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion")
            implementation("org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion")
            implementation("org.mockito:mockito-core:$mockitoVersion")
            implementation("org.mockito:mockito-inline:$mockitoVersion")
            implementation("org.mockito:mockito-junit-jupiter:$mockitoVersion")
        }

        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:cast"
        options.compilerArgs << "-Xlint:classfile"
        options.compilerArgs << "-Xlint:dep-ann"
        options.compilerArgs << "-Xlint:divzero"
        options.compilerArgs << "-Xlint:fallthrough"
        options.compilerArgs << "-Xlint:overrides"
        options.compilerArgs << "-Xlint:rawtypes"
        options.compilerArgs << "-Xlint:static"
        options.compilerArgs << "-Xlint:deprecation"
        options.compilerArgs << "-Werror"
    }


    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    apply from: "../helper.gradle"

    def githubUrl = "https://github.com/webauthn4j/webauthn4j"

    publishing {
        publications {
            standard(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                // "Resolved versions" strategy is used to define dependency version because WebAuthn4J use dependencyManagement (BOM) feature
                // to define its dependency versions. Without "Resolved versions" strategy, version will not be exposed
                // to dependencies.dependency.version in POM file, and it cause warning in the library consumer environment.
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
//                    description = project.description //TODO: this doesn't work. to be fixed. https://github.com/gradle/gradle/issues/12259
                    url = githubUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ynojima'
                            name = 'Yoshikazu Nojima'
                            email = 'mail@ynojima.net'
                        }
                    }
                    scm {
                        url = githubUrl
                    }

                    resolveStrategy = DELEGATE_FIRST
                }
                pom.withXml { pom ->
                    pom.asNode().appendNode("description", project.description) // workaround for https://github.com/gradle/gradle/issues/12259
                }
            }
        }
    }

    def bintrayUser = getVariable('BINTRAY_USER', 'bintrayUser')
    def bintrayToken = getVariable('BINTRAY_TOKEN', 'bintrayToken')
    def artifactoryUser = getVariable('ARTIFACTORY_USER', 'artifactoryUser')
    def artifactoryPassword = getVariable('ARTIFACTORY_PASSWORD', 'artifactoryPassword')
    def mavenCentralUser = getVariable('MAVEN_CENTRAL_USER', 'mavenCentralUser')
    def mavenCentralPassword = getVariable('MAVEN_CENTRAL_PASSWORD', 'mavenCentralPassword')

    task bintrayGpgSign() {
        group = "publishing"
        doLast {
            signArtifactsOnBintray(bintrayUser, bintrayToken)
        }
    }

    task bintrayMavenCentralSync() {
        group = "publishing"
        doLast {
            syncMavenCentralToBintray(bintrayUser, bintrayToken)
        }
    }

    artifactory {
        contextUrl = 'http://oss.jfrog.org/artifactory/simple/'
        publish {
            repository {
                repoKey = 'oss-snapshot-local' // The Artifactory repository key to publish to
                username = artifactoryUser
                password = artifactoryPassword
            }
            defaults {
                publications('standard')
            }
        }
    }

    artifactoryPublish {
        skip = !"${webAuthn4JVersion}".endsWith("-SNAPSHOT") // Publish only when it is SNAPSHOT release
    }

    bintray {
        user = bintrayUser
        key = bintrayToken
        configurations = ['archives']
        publish = true
        dryRun = !("${webAuthn4JVersion}".endsWith(".RELEASE")) // Publish only when it is RELEASE release
        publications = ['standard']
        pkg {
            userOrg = "webauthn4j"
            repo = "webauthn4j"
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            vcsUrl = githubUrl
            version {
                name = "${webAuthn4JVersion}"
                released = new Date()
                vcsTag = "${webAuthn4JVersion}"
                gpg {
                    sign = true
                }
                //Optional configuration for Maven Central sync of the version
                mavenCentralSync {
                    user = mavenCentralUser
                    password = mavenCentralPassword
                }
            }
        }
    }
}

task updateVersionsInDocuments() {
    group = "documentation"
    String regex = "<webauthn4j\\.version>.*</webauthn4j\\.version>"
    String replacement = "<webauthn4j\\.version>" + latestReleasedWebAuthn4JVersion + "</webauthn4j.version>"

    def files = [file('README.md'), file('docs/src/reference/asciidoc/en/introduction.adoc'), file('docs/src/reference/asciidoc/ja/introduction.adoc')]
    files.each { file ->
        String updated = file.getText('UTF-8').replaceFirst(regex, replacement)
        file.setText(updated, 'UTF-8')
    }

}

task generateReleaseNote(type: JavaExec) {
    group = "documentation"
    classpath = files('gradle/lib/github-release-notes-generator.jar')

    args(latestReleasedWebAuthn4JVersion, file("build/release-note.md").absolutePath, "--spring.config.location=file:" + file("github-release-notes-generator.yml").absolutePath)

}

task generateReferenceJA(type: AsciidoctorTask) {
    group = "documentation"
    baseDirFollowsSourceDir()
    sourceDir = file("docs/src/reference/asciidoc/ja")
    outputDir = file("build/docs/asciidoc/html5/ja")
    options eruby: 'erubis'
    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JVersion}"
}

task generateReferenceEN(type: AsciidoctorTask) {
    group = "documentation"
    baseDirFollowsSourceDir()
    sourceDir = file("docs/src/reference/asciidoc/en")
    outputDir = file("build/docs/asciidoc/html5/en")
    options eruby: 'erubis'
    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JVersion}"
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'webauthn4j'
        property 'sonar.issue.ignore.multicriteria', 'e1,e2,e3'
        property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'java:S110'
        property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'java:S1452'
        property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e3.ruleKey', 'common-java:DuplicatedBlocks'
        property 'sonar.issue.ignore.multicriteria.e3.resourceKey', '**/*.java'
    }
}
