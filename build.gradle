/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorGradleVersion}")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:${artifactoryVersion}")
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:${bintrayVersion}")
        classpath("org.owasp:dependency-check-gradle:${owaspDependencyCheckVersion}")
    }

}


apply plugin: 'org.sonarqube'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.owasp.dependencycheck'

check.dependsOn dependencyCheckAggregate

allprojects {
    group 'com.webauthn4j'
    version "${webauthn4jVersion}"

    dependencyCheck {
        failBuildOnCVSS=4 //medium
        suppressionFile="$rootDir/owasp/suppression.xml"
    }

}

subprojects {

    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.artifactory"

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    }

    check.dependsOn dependencyCheckAnalyze

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    apply from: "../helper.gradle"

    def projectUrl = "https://github.com/webauthn4j/webauthn4j"
    def vcsUrl = "https://github.com/webauthn4j/webauthn4j"

    publishing {
        publications {
            artifactPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                pom.withXml {
                    def node = asNode()
                    node.children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST

                        name project.name
                        description project.description
                        url projectUrl
                        scm {
                            url vcsUrl
                        }
                        developers {
                            developer {
                                id 'ynojima'
                                name 'Yoshikazu Nojima'
                                email 'mail@ynojima.net'
                            }
                        }
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                    }
                }
            }
        }
    }

    def bintrayUser = getVariable('BINTRAY_USER', 'bintrayUser')
    def bintrayToken = getVariable('BINTRAY_TOKEN', 'bintrayToken')
    def artifactoryUser = getVariable('ARTIFACTORY_USER', 'artifactoryUser')
    def artifactoryPassword = getVariable('ARTIFACTORY_PASSWORD', 'artifactoryPassword')
    def mavenCentralUser = getVariable('MAVEN_CENTRAL_USER', 'mavenCentralUser')
    def mavenCentralPassword = getVariable('MAVEN_CENTRAL_PASSWORD', 'mavenCentralPassword')

    artifactory {
        contextUrl = 'http://oss.jfrog.org/artifactory/simple/'
        publish {
            repository {
                repoKey = 'oss-snapshot-local' // The Artifactory repository key to publish to
                username = artifactoryUser
                password = artifactoryPassword
            }
            defaults {
                publications('artifactPublication')
            }
        }
    }

    artifactoryPublish {
        skip = !"${webauthn4jVersion}".endsWith("-SNAPSHOT") // Publish only when it is SNAPSHOT release
    }

    bintray {
        user = bintrayUser
        key = bintrayToken
        configurations = ['archives']
        publish = true
        dryRun = !("${webauthn4jVersion}".endsWith(".RELEASE")) // Publish only when it is RELEASE release
        publications = ['artifactPublication']
        pkg {
            userOrg = "webauthn4j"
            repo = "webauthn4j"
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            vcsUrl = vcsUrl
            version {
                name = "${webauthn4jVersion}"
                released = new Date()
                vcsTag = "${webauthn4jVersion}"
                gpg {
                    sign = true
                }
                //Optional configuration for Maven Central sync of the version
                mavenCentralSync {
                    user = mavenCentralUser
                    password = mavenCentralPassword
                }
            }
        }
    }

}


asciidoctorj {
    version = asciidoctorJVersion
}

asciidoctor {
    sourceDir = file("docs/src/reference/asciidoc")
//  backends = ['docbook5']
    resources {
        from(sourceDir) {
            include '*/images/**'
        }
    }
    options eruby: 'erubis'

    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webauthn4jVersion}"
}
