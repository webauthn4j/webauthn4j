/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



buildscript {

    def springBootVersion = "2.2.6.RELEASE"
    def sonarqubeVersion = "2.8.0.1969"
    def asciidoctorGradleVersion="1.6.1"
    def artifactoryVersion="4.15.1"
    def bintrayVersion = "1.8.4"
    def owaspDependencyCheckVersion = "5.3.2.1"
    def httpBuilderVersion = "0.7.2"

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradleVersion")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:$artifactoryVersion")
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayVersion")
        classpath("org.owasp:dependency-check-gradle:$owaspDependencyCheckVersion")
        classpath("org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion")
    }
}

apply plugin: 'java'
apply plugin: 'org.sonarqube'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.owasp.dependencycheck'

allprojects {
    group 'com.webauthn4j'
    version "$webAuthn4JVersion"

    dependencyCheck {
        failBuildOnCVSS = project.hasProperty("failBuildOnCVSS") ? project.property("failBuildOnCVSS").toInteger() : 11 // Never fail with this value. CI build argument updates this property for blocking vulnerable release.
        suppressionFile = "$rootDir/owasp/suppression.xml"
    }

}

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.artifactory"

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    def springBootVersion = "2.1.12.RELEASE"
    def jacksonBomVersion = "2.10.3"
    def bouncyCastleVersion = "1.64"
    def kerbyVersion = "2.0.0"

    dependencyManagement {
        dependencies {
            dependency("org.apache.kerby:kerby-asn1:$kerbyVersion")
            dependency("org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion")
            dependency("org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion")
        }
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            // Import Jackson Bom independently as Spring Boot Bom 2.2.x does not depend Jackson 2.10.x series
            mavenBom "com.fasterxml.jackson:jackson-bom:${jacksonBomVersion}"
        }
    }

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Werror" << "-Xlint:deprecation"
    }

    check.dependsOn dependencyCheckAnalyze

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    apply from: "../helper.gradle"

    def githubUrl = "https://github.com/webauthn4j/webauthn4j"

    publishing {
        publications {
            standard(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = project.name
                    description = project.description
                    url = githubUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ynojima'
                            name = 'Yoshikazu Nojima'
                            email = 'mail@ynojima.net'
                        }
                    }
                    scm {
                        url = githubUrl
                    }

                    resolveStrategy = DELEGATE_FIRST
                }
            }
        }
    }

    def bintrayUser = getVariable('BINTRAY_USER', 'bintrayUser')
    def bintrayToken = getVariable('BINTRAY_TOKEN', 'bintrayToken')
    def artifactoryUser = getVariable('ARTIFACTORY_USER', 'artifactoryUser')
    def artifactoryPassword = getVariable('ARTIFACTORY_PASSWORD', 'artifactoryPassword')
    def mavenCentralUser = getVariable('MAVEN_CENTRAL_USER', 'mavenCentralUser')
    def mavenCentralPassword = getVariable('MAVEN_CENTRAL_PASSWORD', 'mavenCentralPassword')

    task bintrayGpgSign(){
        group = "publishing"
        doLast{
            signArtifactsOnBintray(bintrayUser, bintrayToken);
        }
    }

    task bintrayMavenCentralSync(){
        group = "publishing"
        doLast{
            syncMavenCentralToBintray(bintrayUser, bintrayToken);
        }
    }

    artifactory {
        contextUrl = 'http://oss.jfrog.org/artifactory/simple/'
        publish {
            repository {
                repoKey = 'oss-snapshot-local' // The Artifactory repository key to publish to
                username = artifactoryUser
                password = artifactoryPassword
            }
            defaults {
                publications('standard')
            }
        }
    }

    artifactoryPublish {
        skip = !"${webAuthn4JVersion}".endsWith("-SNAPSHOT") // Publish only when it is SNAPSHOT release
    }

    bintray {
        user = bintrayUser
        key = bintrayToken
        configurations = ['archives']
        publish = true
        dryRun = !("${webAuthn4JVersion}".endsWith(".RELEASE")) // Publish only when it is RELEASE release
        publications = ['standard']
        pkg {
            userOrg = "webauthn4j"
            repo = "webauthn4j"
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            vcsUrl = githubUrl
            version {
                name = "${webAuthn4JVersion}"
                released = new Date()
                vcsTag = "${webAuthn4JVersion}"
                gpg {
                    sign = true
                }
                //Optional configuration for Maven Central sync of the version
                mavenCentralSync {
                    user = mavenCentralUser
                    password = mavenCentralPassword
                }
            }
        }
    }

}

check.dependsOn dependencyCheckAggregate

task updateVersionsInDocuments() {
    group = "documentation"
    String regex = "<webauthn4j\\.version>.*</webauthn4j\\.version>";
    String replacement = "<webauthn4j\\.version>" + latestReleasedWebAuthn4JVersion + "</webauthn4j.version>";

    def files = [file('README.md'), file('docs/src/reference/asciidoc/en/introduction.adoc'), file('docs/src/reference/asciidoc/ja/introduction.adoc')]
    files.each { file ->
        String updated = file.getText('UTF-8').replaceFirst(regex, replacement)
        file.setText(updated, 'UTF-8')
    }

}

task generateReleaseNote(type: JavaExec) {
    group = "documentation"
    classpath = files('gradle/lib/github-release-notes-generator.jar')

    args(latestReleasedWebAuthn4JVersion, file("build/release-note.md").absolutePath, "--spring.config.location=file:" + file("github-release-notes-generator.yml").absolutePath)

}

asciidoctorj {
    version = "1.6.2"
}

asciidoctor {
    sourceDir = file("docs/src/reference/asciidoc")
//  backends = ['docbook5']
    resources {
        from(sourceDir) {
            include '*/images/**'
        }
    }
    options eruby: 'erubis'

    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JVersion}"
}
