/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {

    ext {
        // Gradle plugins
        sonarqubeVersion = "5.1.0.4882"
        asciidoctorGradleVersion = "4.0.3"

        // Define implementation dependency versions independently
        jacksonVersion = "2.18.1"
        kerbyVersion = "2.1.0"
        slf4jVersion = "2.0.16"
        bouncyCastleVersion = "1.70"
        jetbrainsAnnotationsVersion = "26.0.1"

        // for test library dependencies
        mockitoVersion = "5.14.2"
        springBootVersion = "3.3.6"
        logbackVersion = "1.5.12"
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorGradleVersion")
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

apply plugin: 'java'
apply plugin: 'org.sonarqube'
apply plugin: 'org.asciidoctor.jvm.convert'

allprojects {
    group 'com.webauthn4j'
    version "$webAuthn4JVersion"
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: "maven-publish"

    sourceCompatibility = 1.8

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed" //, "standardOut", "standardError"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            showStandardStreams = false
        }
    }

    repositories {
        mavenCentral()
    }


    dependencies {
        constraints {
            // Implementation dependencies
            implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
            implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion")
            implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

            implementation("org.apache.kerby:kerby-asn1:$kerbyVersion")

            implementation("org.slf4j:slf4j-api:$slf4jVersion")

            implementation("org.jetbrains:annotations:$jetbrainsAnnotationsVersion")

            // Test dependencies
            implementation("ch.qos.logback:logback-classic:$logbackVersion")
            implementation("org.mockito:mockito-core:$mockitoVersion")
            implementation("org.mockito:mockito-junit-jupiter:$mockitoVersion")

            // webauthn4j-test implementation dependencies
            implementation("org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion")
            implementation("org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion")
        }

        testImplementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11 // Although webauthn4j uses JDK 15+ API to support EdDSA, keep target version 11 to support JDK11 users who don't need EdDSA.
    }

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:cast"
        options.compilerArgs << "-Xlint:classfile"
        options.compilerArgs << "-Xlint:dep-ann"
        options.compilerArgs << "-Xlint:divzero"
        options.compilerArgs << "-Xlint:fallthrough"
        options.compilerArgs << "-Xlint:overrides"
        options.compilerArgs << "-Xlint:rawtypes"
        options.compilerArgs << "-Xlint:static"
        //options.compilerArgs << "-Xlint:deprecation" //Temporary suspended to allow com.webauthn4j.metadata.legacy classes TODO: enable this option again when legacy classes are removed
        options.compilerArgs << "-Werror"
    }


    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    apply from: "../util.gradle"

    def githubUrl = "https://github.com/webauthn4j/webauthn4j"
    def mavenCentralUser = getVariable('MAVEN_CENTRAL_USER', 'mavenCentralUser')
    def mavenCentralPassword = getVariable('MAVEN_CENTRAL_PASSWORD', 'mavenCentralPassword')
    def pgpSigningKey = getVariable('PGP_SIGNING_KEY', 'pgpSigningKey')
    def pgpSigningKeyPassphrase = getVariable('PGP_SIGNING_KEY_PASSPHRASE', 'pgpSigningKeyPassphrase')

    publishing {
        publications {
            standard(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                // "Resolved versions" strategy is used to define dependency version because WebAuthn4J use dependencyManagement (BOM) feature
                // to define its dependency versions. Without "Resolved versions" strategy, version will not be exposed
                // to dependencies.dependency.version in POM file, and it cause warning in the library consumer environment.
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
//                    description = project.description //TODO: this doesn't work. to be fixed. https://github.com/gradle/gradle/issues/12259
                    url = githubUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ynojima'
                            name = 'Yoshikazu Nojima'
                            email = 'mail@ynojima.net'
                        }
                    }
                    scm {
                        url = githubUrl
                    }
                    resolveStrategy = Closure.DELEGATE_FIRST
                }
                pom.withXml { pom ->
                    def root = pom.asNode()
                    root.appendNode("description", project.description) // workaround for https://github.com/gradle/gradle/issues/12259
                    def dependencyManagement = root.dependencyManagement
                    if (dependencyManagement != null) {
                        root.remove(dependencyManagement)
                    }
                }
            }
        }
        repositories {
            maven {
                name = "mavenCentral"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = "${mavenCentralUser}"
                    password = "${mavenCentralPassword}"
                }
            }
            maven {
                name = "snapshot"
                url = "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username = "${mavenCentralUser}"
                    password = "${mavenCentralPassword}"
                }
            }
        }
    }

    signing {
        useInMemoryPgpKeys(pgpSigningKey, pgpSigningKeyPassphrase)
        sign publishing.publications.standard
    }

    tasks.withType(Sign) {
        onlyIf { pgpSigningKey != null && pgpSigningKeyPassphrase != null }
    }

    publishStandardPublicationToSnapshotRepository.onlyIf { webAuthn4JVersion.endsWith("-SNAPSHOT") }
    publishStandardPublicationToMavenCentralRepository.onlyIf { !webAuthn4JVersion.endsWith("-SNAPSHOT") }

}


task updateVersionsInDocuments() {
    group = "documentation"
    String regex = "<webauthn4j\\.version>.*</webauthn4j\\.version>"
    String replacement = "<webauthn4j\\.version>" + latestReleasedWebAuthn4JVersion + "</webauthn4j.version>"

    def files = [file('README.md'), file('docs/src/reference/asciidoc/en/introduction.adoc'), file('docs/src/reference/asciidoc/ja/introduction.adoc')]
    files.each { file ->
        String updated = file.getText('UTF-8').replaceFirst(regex, replacement)
        file.setText(updated, 'UTF-8')
    }

}

task generateReleaseNote(type: JavaExec) {
    group = "documentation"
    classpath = files('gradle/lib/github-release-notes-generator.jar')

    args(latestReleasedWebAuthn4JVersion, file("build/release-note.md").absolutePath, "--spring.config.location=file:" + file("github-release-notes-generator.yml").absolutePath)

}

import org.asciidoctor.gradle.jvm.AsciidoctorTask

task generateReferenceJA(type: AsciidoctorTask) {
    group = "documentation"
    baseDirFollowsSourceDir()
    sourceDir = file("docs/src/reference/asciidoc/ja")
    outputDir = file("build/docs/asciidoc/html5/ja")
    options eruby: 'erubis'
    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JVersion}"
}

task generateReferenceEN(type: AsciidoctorTask) {
    group = "documentation"
    baseDirFollowsSourceDir()
    sourceDir = file("docs/src/reference/asciidoc/en")
    outputDir = file("build/docs/asciidoc/html5/en")
    options eruby: 'erubis'
    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JVersion}"
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'webauthn4j'
        property 'sonar.issue.ignore.multicriteria', 'e1,e2,e3'
        property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'java:S110'
        property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'java:S1452'
        property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e3.ruleKey', 'common-java:DuplicatedBlocks'
        property 'sonar.issue.ignore.multicriteria.e3.resourceKey', '**/*.java'
    }
}
